version: '3.9'

services:
  app:
    image: myapp:latest
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_ENV=production
    container_name: myapp_container
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mysql://user:password@database:3306/mydb
    volumes:
      - app_data:/app/data
    depends_on:
      database:
        condition: service_healthy
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    secrets:
      - db_password
    configs:
      - source: app_config
        target: /app/config/app_config.json

  database:
    image: mysql:latest
    container_name: mysql_container
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_password
      MYSQL_DATABASE: mydb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    secrets:
      - db_password

  redis:
    image: redis:alpine
    container_name: redis_container
    restart: always
    ports:
      - "6379:6379"
    networks:
      - my_network
    volumes:
      - redis_data:/data

  nginx:
    image: nginx:latest
    container_name: nginx_container
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - my_network

volumes:
  app_data:
  db_data:
  redis_data:

networks:
  my_network:
    driver: bridge

secrets:
  db_password:
    file: ./secrets/db_password.txt

configs:
  app_config:
    file: ./configs/app_config.json
